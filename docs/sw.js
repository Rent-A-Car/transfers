const Static_CACHE_Version="v0",Static_CACHE="static-v0",Static_CACHEAssets=["./","./index.html","./css/main.css","./js/main.js","./manifest.webmanifest","./css/bootstrap-icons.css","https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css","https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.min.js","https://hammerjs.github.io/dist/hammer.min.js","https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/fonts/bootstrap-icons.woff","favicon.ico","./icons/android-chrome-192x192.png"],DCACHE="cache-auto";async function checkCache(t){return await caches.match(t)}async function checkOnline(t){const s=await caches.open(CACHE);try{const e=await fetch(t);return await s.put(t,e.clone()),e}catch(e){const c=await s.match(t);return c||(-1!==t.url.indexOf(".html")?caches.match("./offline.html"):caches.match("./images/no-image.jpg"))}}self.addEventListener("install",async t=>{const s=await caches.open(Static_CACHE);await s.addAll(Static_CACHEAssets),console.log("Service worker встановлено")}),self.addEventListener("activate",async t=>{const s=(await caches.keys()).map(async t=>{[Static_CACHE].includes(t)||await caches.delete(t)});await Promise.all(s),console.log("Service worker актевовано (видалено застарілий кеш)")}),self.addEventListener("fetch",t=>{console.log("Trying to fetch ",t.request),t.respondWith(checkCache(t.request))});